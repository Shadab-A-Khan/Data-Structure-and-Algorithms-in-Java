Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 




/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
       quickSort(input, 0, input.length-1);
		
	}
    private static void quickSort(int[] input , int si , int ei){
        if(si>=ei){
            return;
        }
        int pivotPos = partition(input, si,ei);
        quickSort(input,si,pivotPos-1);
        quickSort(input,pivotPos+1,ei);
    }
    public static int partition(int[] arr,int start,int end) {
		
		int pivot=arr[start];
		int count=0;
		for(int i=start+1;i<=end;i++) {
			if(arr[i] <= pivot) {
				count++;
			}
		}
		
		int pivotPos=start+count;
		int temp=arr[pivotPos];
		arr[pivotPos]=arr[start];
		arr[start]=temp;
		
		int i=start,j=end;
		while(i < pivotPos && j> pivotPos) {
			if(arr[i] <= pivot) {
				i++;
			}
			else if(arr[j] > pivot) {
				j--;
			}
			else {
				int temp2=arr[i];
				arr[i]=arr[j];
				arr[j]=temp2;
				i++;
				j--;
				
			}
		}
		return pivotPos;		
	}	
}
