Second Largest Element In Tree
Send Feedback
Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40





import java.util.Queue;
import java.util.LinkedList;

public class Solution {

	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
          if(root.children.size()==0){
			  return null;
		  }

          TreeNode<Integer> fl=root;
		  TreeNode<Integer> sl=null;
          int data=0;
		  Queue<TreeNode<Integer>> q = new LinkedList<>();
		  q.add(root);

		  while(!q.isEmpty()){
			  TreeNode<Integer> front=q.poll();

			  for(int i=0; i<front.children.size(); i++){
				  q.add(front.children.get(i));
			  }
               if(front.data>data){
                    if(front.data>fl.data){
				       sl=fl;
				      fl=front;
				      data=sl.data;
			       }else if(front.data<fl.data){
				      sl=front;
				    data=sl.data;
			      }
			   }
			  
		  }

          return sl;
	}
		
}
