Code : Print Level Wise
Send Feedback
Given a generic tree, print the input tree in level wise order. That is, print the elements at same level in one line (separated by space). Print different levels in differnet lines.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 
Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output Format :
Level wise print
Sample Input :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output :
10
20 30 40 
40 50





import java.util.Queue;
import java.util.LinkedList;

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
		
public class Solution {
    
	public static void printLevelWise(TreeNode<Integer> root){
		Queue<TreeNode<Integer>> queue = new LinkedList<>();
        //added 1st level here 
        queue.add(root);
        queue.add(null);

        while(!queue.isEmpty())
        {
            TreeNode<Integer> frontNode = queue.remove();
            if(frontNode == null){
                if(queue.isEmpty()){
                    break;
                }
                System.out.println();
                queue.add(null);
            }else{
                System.out.print(frontNode.data+" ");
                for(int i=0;i<frontNode.children.size();i++){
                    queue.add(frontNode.children.get(i));
                }
            }          
        }   
    }
}

//   public static TreeNode<Integer> takeInput(){
//    Scanner sc = new Scanner(System.in){
//   System.out.println("Enter next Node");
//        int n = s.nextInt();
//        TreeNode<Integer> root =new TreeNode<>(n);
//        Queue<TreeNode<Integer> pendingNodes = new Queue<>();
//        pendingNode.enque(root);
//        while(!pendingNode.isEmpty()){
           
//            TreeNode<Integer> frontNode = new TreeNode<>();
//            System.out.println("Enter of Children to ")
//        }
       
//    }
// }
