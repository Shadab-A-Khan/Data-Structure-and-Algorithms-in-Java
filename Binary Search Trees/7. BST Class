Code: BST Class
Send Feedback
Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.







// /*
//  * Binary Tree Node class
//  * 
//  * class BinaryTreeNode<T> { 
//  * 		T data; 
//  * 		BinaryTreeNode<T> left; 
//  * 		BinaryTreeNode<T> right;
//  * 		public BinaryTreeNode(T data) 
//  * 		{ 
//  * 			this.data = data; 
//  * 		}
//  * }
//  */

//  /* 
//  * Main Method being used internally
//  *	public static void main(String[] args) throws IOException {
//  *		BinarySearchTree bst = new BinarySearchTree();
//  *		int choice, input;
//  *		int q = Integer.parseInt(br.readLine());
//  *		while (q-- > 0) {
//  *			st = new StringTokenizer(br.readLine());
//  *			choice = Integer.parseInt(st.nextToken());
//  *			switch (choice) {
//  *			case 1:
//  *				input = Integer.parseInt(st.nextToken());
//  *				bst.insert(input);
//  *				break;
//  *				case 2:
//  *				input = Integer.parseInt(st.nextToken());
//  *				bst.remove(input);
//  *				break;
//  *			case 3:
//  *				input = Integer.parseInt(st.nextToken());
//  *				System.out.println(bst.search(input));
//  *				break;
//  *			default:
//  *				bst.printTree();
//  *				break;
//  *			}
//  *		}
//  *	}
//  */

// public class BinarySearchTree {
//     BinaryTreeNode<Integer> root ;
    
// 	public void insert(int data) {
// 		//Implement the insert() function
//         if(this.root == null){
//             this.root = new BinaryTreeNode<>(data) ;
//             return ;
//         }
//         insert(root,data) ;
// 	}
    
//     public BinaryTreeNode<Integer> insert(BinaryTreeNode<Integer> root , int data){
        
//         if(root == null){
//             return new BinaryTreeNode<>(data) ;
//         }
        
//         if(data <= root.data){
//             root.left = insert(root.left,data) ;
//         }
//         else{
//             root.right = insert(root.right,data) ;
//         }
//         return root ;
        
//     }
	
// 	public void remove(int data) {
// 		//Implement the remove() function
//         remove(root,data) ;
// 	}
    
//     private BinaryTreeNode<Integer> remove(BinaryTreeNode<Integer> root , int data){
        
//         if(data < root.data){
//             return remove(root.left,data) ;
//         }
//         else if(data > root.data){
//             return remove(root.right,data) ;
//         }
//         else{
//             if(root.left == null && root.right == null){
//                 return null ;
//             }
//             else if(root.left == null && root.right != null){
//                 return root.right ;
//             }
//             else if(root.left != null && root.right == null){
//                 return root.left ;
//             }
//             else{
//                 int min = min(root.right) ;
//                 root.data = min ;
//                 root.right = remove(root.right,min) ;
//                 return root ;
//             }
//         }
//         // return root ;
//     }
    
//     private int min(BinaryTreeNode<Integer> root){
//         while(root.left != null){
//             root = root.left ;
//         }
//         return root.data ;
//     }
	
// 	public void printTree() {
// 		//Implement the printTree() function
//         printTree(root) ;
// 	}
    
//     private void printTree(BinaryTreeNode<Integer> root) {
// 		if (root == null) {
// 			return;
// 		}
// 		String toBePrinted = root.data + ":";
// 		if (root.left != null) {
// 			toBePrinted += "L:" + root.left.data + ",";
// 		}
		
// 		if (root.right != null) {
// 			toBePrinted += "R:" + root.right.data;
// 		}
// 		System.out.println(toBePrinted);
// 		printTree(root.left);
// 		printTree(root.right);
// 	}
	
// 	public boolean search(int data) {
// 		//Implement the search() function
//         return search(data,root) ;
// 	}
    
//     private boolean search(int data , BinaryTreeNode<Integer> root){
//         if(root==null){
//             return false;
//         }
        
//         if(root.data==data){
//             return true;
//         }
        
//         if(root.data>data){
//             return search(data , root.left);
//         }
//         else if(root.data<data){
//             return search(data , root.right);
//         }
//         return false;
//     }
	

// }








/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {
    

    private BinaryTreeNode<Integer> root;
    
    public BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> root,int data) {
         
        if(root==null){
         BinaryTreeNode<Integer> newNode=new BinaryTreeNode<Integer>(data);
            return newNode;
        }
        
        if(root.data>=data){
           root.left=insertHelper(root.left,data);
        }
        
        else {
           root.right=insertHelper(root.right,data);
        }
        return root;
        
    }
	public void insert(int data) {
        // BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>();
        root=insertHelper(root,data);
		
	}
    
    
    
    
    public BinaryTreeNode<Integer> removeHelper(BinaryTreeNode<Integer> root, int data){
        if(root==null){
            return null;
        }
        if(root.data<data){
           //root.right =removeHelper(root.right,data);
            BinaryTreeNode<Integer> newRight=removeHelper(root.right,data);
                root.right=newRight;
                 return root;
        }
        else if(root.data>data){
            //root.left=removeHelper(root.left,data);
            BinaryTreeNode<Integer> newLeft=removeHelper(root.left,data);
                root.left=newLeft;
                 return root;
        }else{
            if(root.left==null && root.right==null){
                return null;
            }
            else if(root.right==null){
                return root.left;
            }else if(root.left==null){
                return root.right;
            }else{
                BinaryTreeNode<Integer> minNode=root.right;
                while(minNode.left!=null){
                    minNode=minNode.left;
                }
                root.data=minNode.data;
                root.right=removeHelper(root.right, minNode.data);
                return root;
            }
        }
        
        

    }
	
	public void remove(int data) {
		// BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>();
		 root=removeHelper(root,data);
	}
	
    
    
    
    
    private void printTreeHelper(BinaryTreeNode<Integer> root) {
		
        if(root==null){
            return;
        }
        
        System.out.print(root.data+":");
        if(root.left!=null){
         System.out.print("L:"+root.left.data+ ",");
        }
        if(root.right!=null){
            System.out.print("R:"+root.right.data);
        }
        System.out.println();
        printTreeHelper(root.left);
        printTreeHelper(root.right);
        
	}
    
	public void printTree() {
		// BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>();
        printTreeHelper(root);
        
	}
    
    
    
    
    public static boolean searchHelper(BinaryTreeNode<Integer> root,int data){
        if(root==null){
            return false;
        }
        
        if(root.data==data){
            return true;
        }
        else if(root.data<data){
            return searchHelper(root.right,data);
        }
        else
            return searchHelper(root.left,data);
        
    }
	
	public boolean search(int data) {
		//Implement the search() function
         //BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>();
        return searchHelper(root,data);
	}
	

}














_______________________________________________________________________________OR






public class BinarySearchTree {

	private BinaryTreeNode<Integer> root;
	
	private BinaryTreeNode<Integer> insertData(int data, BinaryTreeNode<Integer> root) {
		if (root == null) {
			BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(data);
			return newNode;
		}
		if (root.data > data) {
			root.left = insertData(data, root.left);
		} else {
			root.right = insertData(data, root.right);
		}
		return root;
	}
	
	public void insertData(int data) {
		root = insertData(data, root);
	}
	
	public void deleteData(int data) {
		root = deleteData(data, root);
	}
	
	private BinaryTreeNode<Integer> deleteData(int data, BinaryTreeNode<Integer> root) {
		if (root == null) {
			return null;
		}
		if (data < root.data) {
			root.left = deleteData(data, root.left);
			return root;
		} else if (data > root.data) {
			root.right = deleteData(data, root.right);
			return root;
		} else {
			if (root.left == null && root.right == null) {
				return null;
			} else if (root.left == null) {
				return root.right;
			} else if (root.right == null) {
				return root.left;
			} else {
				BinaryTreeNode<Integer> minNode = root.right;
				while (minNode.left != null) {
					minNode = minNode.left;
				}
				root.data = minNode.data;
				root.right = deleteData(minNode.data, root.right);
				return root;
			}
		}
		
	}

	private void printTree(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}
		String toBePrinted = root.data + "";
		if (root.left != null) {
			toBePrinted += "L:" + root.left.data + ",";
		}
		
		if (root.right != null) {
			toBePrinted += "R:" + root.right.data;
		}
		System.out.println(toBePrinted);
		printTree(root.left);
		printTree(root.right);
	}
	
	public void printTree() {
		printTree(root);
	}
	
	private boolean hasDataHelper(int data, BinaryTreeNode<Integer> root) {
		if (root == null) {
			return false;
		}
		
		if (root.data == data) {
			return true;
		} else if (data > root.data) {
			// call right
			return hasDataHelper(data, root.right);
		} else {
			// call left
			return hasDataHelper(data, root.left);
		}
	}
	
	public boolean hasData(int data) {
		return hasDataHelper(data, root);
	}
}




















