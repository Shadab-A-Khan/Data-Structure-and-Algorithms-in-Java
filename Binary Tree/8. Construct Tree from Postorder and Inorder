construct Tree from Postorder and Inorder
Send Feedback
For a given postorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the Postorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
4 5 2 6 7 3 1 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 
Sample Input 2:
6
2 9 3 6 10 5 
2 6 3 9 5 10 
Sample Output 2:
5 
6 10 
2 3 
9 
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {
    public static BinaryTreeNode<Integer> buildTree(int[] post, int[] in, int postSI, int postEI, int inSI,int inEI){
       if(inSI>inEI){
           return null;
       }
    
    
    int rootData=post[postEI];
    BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootData);
    int siPostLeft=postSI;
    int siInLeft=inSI;
    int eiInRight=inEI;
    int rootIndex=-1;
    for(int i=inSI;i<=inEI;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
            
    }
        
        
       
    int eiInLeft=rootIndex-1;
    int siInRight=rootIndex+1;
        
   
   // int leftSubtreeLength=eiInLeft-siInLeft-1;
    //int RightSubtreeLength=eiInRight-siInRight+1;
   // int eiPostLeft=siPostLeft+leftSubtreeLength-1;
   // int siPostRight=eiPostLeft+1;
    //int eiPostRight=siPostLeft+leftSubtreeLength;
        
    int eiPostLeft=postSI+(rootIndex-inSI)-1;
    int siPostRight =postSI+(rootIndex-inSI);
    int eiPostRight=postEI-1;
        
    BinaryTreeNode<Integer> leftChild=buildTree(post, in, siPostLeft, eiPostLeft, siInLeft, eiInLeft);
    BinaryTreeNode<Integer> rightChild=buildTree(post, in, siPostRight, eiPostRight, siInRight, eiInRight);
    root.left=leftChild;
    root.right=rightChild;
    return root;
    
    
}

	public static BinaryTreeNode<Integer> buildTree(int[] post, int[] in) {
		//Your code goes here
          BinaryTreeNode<Integer> root=buildTree(post,in,0,post.length-1,0,in.length-1);
       return root;
        
        
        
	}

}





//OR





public class Solution {
    
    public static BinaryTreeNode<Integer> buildTreeHelper(int[] postOrder, int[] inOrder, int startPosO,int endPosO, int starInO,int endInO){
        if(startPosO>endPosO || starInO>endInO){
            return null;
        }
        
        int rootData=postOrder[endPosO];
        BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootData);
       // int count=-1;
        int rootIndex=0;
        for(int i=starInO;i<=endInO;i++){
           if(rootData==inOrder[i]){
               rootIndex=i;
               break;
           }
            //++count;
        }
        
        BinaryTreeNode<Integer> left=buildTreeHelper(postOrder,inOrder,startPosO,  (startPosO+rootIndex-starInO)-1  ,starInO,rootIndex-1);
        BinaryTreeNode<Integer> right=buildTreeHelper(postOrder,inOrder, (startPosO+rootIndex-starInO)  ,endPosO-1, rootIndex+1,endInO);
        root.left=left;
        root.right=right;
        return root;
        
        
        
    }

	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		//Your code goes here
        BinaryTreeNode<Integer> root= buildTreeHelper(postOrder,inOrder,0,postOrder.length-1,0,inOrder.length-1);
        return root;
	}

}




