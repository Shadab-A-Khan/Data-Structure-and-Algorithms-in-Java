Code: Construct Tree from Preorder and Inorder
Send Feedback
For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the preorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 
Sample Input 2:
6
5 6 2 3 9 10 
2 6 3 9 5 10 
Sample Output 2:
5 
6 10 
2 3 
9 






public class Solution {
    
    public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder, int startP, int endP, int startI, int endI){
        if(startP > endP || startI > endI)
            return null;
        
        BinaryTreeNode<Integer> root = new BinaryTreeNode<>(preOrder[startP]);
        int i = startI;
        while(inOrder[i] != preOrder[startP]){
            ++i;
        }
        root.left = buildTree(preOrder, inOrder, startP + 1, startP + (i - startI), startI, i - 1);
        root.right = buildTree(preOrder, inOrder, startP + (i - startI) + 1, endP, i + 1, endI);
        return root;
    }

	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		return buildTree(preOrder, inOrder, 0, preOrder.length - 1, 0, inOrder.length - 1);
	}

}


                               //or

// public class Solution {

// 	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
//        return helper(preOrder,inOrder,0,0,inOrder.length-1); 
// 	}
//     private static BinaryTreeNode<Integer> helper(int[] pre,int[] in,int psi,int isi,int iei){
//         if(psi>pre.length-1||isi>iei){
//             return null;
//         }
//         BinaryTreeNode<Integer> root=new BinaryTreeNode<>(pre[psi]);
//         int ini=0;
//         for(int i=isi;i<=iei;i++){
//             if(in[i]==root.data){
//                 ini=i;
//             }
//         }
//         root.left=helper(pre,in,psi+1,isi,ini-1);
//         root.right=helper(pre,in,psi+ini-isi+1,ini+1,iei);
//         return root;
//     }
// }
