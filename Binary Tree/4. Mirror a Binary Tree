Mirror a Binary Tree
Send Feedback
For a given Binary Tree of type integer, update it with its corresponding mirror image.
Example:
Alt text

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the mirrored tree in a level-wise order. 
Each level will be printed on a new line. Elements printed at each level will be separated by a single line.
Note:
You are not required to print anything explicitly. It has already been taken care of.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1:
1 
3 2 
7 6 5 4
Sample Input 2:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 2:
5 
6 10 
3 2 
9





/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void mirrorBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here
        if(root==null){
            return ;
        }
        mirrorBinaryTree(root.left);
        mirrorBinaryTree(root.right);
        
        BinaryTreeNode<Integer> temp=root.right;
        root.right=root.left;
        root.left=temp;
	}
	
}




see to find the mirror image we need to update the 
root's left node with root's right node

but to do that we need to do that from bottom to 
if we swap the address of root'left and root's right
from top to bottom it wont give the desired result
you can check by doing a dry run on paper

so now we need to do this bottom up

so what we will do 

 the first step should be a check 


 first we will check if root itslef is null then 
no need to do anything

result from there only


now we will call recursion on root's left and root's right

and when we reach a point were there is no child of that node,

then simaly we will swap the vlue of the nodes 
