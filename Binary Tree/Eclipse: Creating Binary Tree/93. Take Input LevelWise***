 public static BinaryTreeNode<Integer> takeInputLeveWise(){
		
		 		Scanner sc=new Scanner(System.in);
		 		System.out.print("Enter Root data");
		 		int rootData=sc.nextInt();
		 		if(rootData==-1) {
		 			return null;
		 		}
		 		BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootData);
		 		Queue<BinaryTreeNode<Integer>> pendingNode=new LinkedList<BinaryTreeNode<Integer>>();
		 		pendingNode.add(root);
		 		while(!pendingNode.isEmpty()) {
		 			BinaryTreeNode<Integer> front=pendingNode.poll();
		 			System.out.println("Enter the left child of "+front.data);
		 			int frontLeft=sc.nextInt();
		 			if(frontLeft!=-1) {
		 				BinaryTreeNode<Integer> leftChild=new BinaryTreeNode<Integer>(frontLeft);
		 				front.left=leftChild;
		 				pendingNode.add(leftChild);
		 			}
		 			
		 			System.out.println("Enter the right child of "+front.data);
		 			int frontRight=sc.nextInt();
		 			if(frontRight!=-1) {
		 				BinaryTreeNode<Integer> rightChild=new BinaryTreeNode<Integer>(frontRight);
		 				front.right=rightChild;
		 				pendingNode.add(rightChild);
		 			}
		 			
		 			
		     }
		 	
		 	return root;	
		 		
	  }
