Code: Number of Balanced BTs
Send Feedback
Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced.
This number can be huge, so, return output modulus 10^9 + 7.
Write a simple recursive solution.
Input Format :
The first and only line of input contains an integer, that denotes the value of h. Here, h is the height of the tree.
Output Format :
The first and only line of output contains the count of balanced binary trees modulus 10^9 + 7.
Constraints :
1 <= h <= 24
Time Limit: 1 sec
Sample Input 1:
3
Sample Output 1:
15
Sample Input 2:
4
Sample Output 2:
315





/*
    Time complexity: O(2^N)
    Space complexity: O(N)

    where N is the final height of the binary tree
*/
// //**Recursion ** //
public class Solution {
	static int mod = (int) Math.pow(10, 9) + 7;
 	public static long balancedBTs(long n){

		if(n==0 || n==1){
			return 1;
		}

		long left = balancedBTs(n - 1);
		long right = balancedBTs(n - 2);
		long temp1=(left*left)%mod;
		long temp2=2*(left*right)%mod;

		long ans = (temp1 + temp2) % mod;
		return ans;

	}
}




//__________________OR_________________________




// //**Memoization ** //

import java.util.*;
public class Solution {
	static int mod = (int) Math.pow(10, 9) + 7;
	public static long balancedBTs(int n, long[] storage) {

		if (n == 0 || n == 1) {
			return 1;
		}
		if(storage[n]!=-1){
			return storage[n];
		}

		long left = balancedBTs(n - 1,storage);
		long right = balancedBTs(n - 2,storage);
		long temp1 = (left * left) % mod;
		long temp2 = 2 * (left * right) % mod;

		storage[n] = (temp1 + temp2) % mod;
		return storage[n];

	}
 	public static long balancedBTs(long n){
        int length=(int)n;
		long[] storage=new long[length+1];
		Arrays.fill(storage,(long)(-1));
	    return balancedBTs(length, storage);

	}
}

