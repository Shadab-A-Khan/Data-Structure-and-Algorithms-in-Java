Code: Minimum Count of Squares
Send Feedback
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1






//** Recursion

public class Solution {
  public static int minCount(int n) {
	if(n==0 || n==1){
            return n;
        }
        int ans=Integer.MAX_VALUE;
        for(int i=1; i*i<=n ; i++){
            int tempCount=minCount(n-(i*i));
            if(ans>tempCount){
		ans=tempCount;
	    }
        }
        return 1+ans;
   }

}



_________________________________________________
//** Memoizaton

import java.util.*;
public class Solution {
	public static int minCount(int n,int[] storage) {
		if (n == 0 || n == 1) {
			return n;
		}
		if(storage[n]!=-1){
			return storage[n];
		}
		int ans = Integer.MAX_VALUE;
		for (int i = 1; i * i <= n; i++) {
			int tempCount = minCount(n - (i * i),storage);
			storage[n - (i * i)] = ans;
			if (ans > tempCount) {
				ans = tempCount;
			}
		}
		return 1 + ans;
	}
	public static int minCount(int n) {
		int[] storage=new int[n+1];
		Arrays.fill(storage,-1);
		return minCount(n,storage);

	}

}









//__________________________________________________

//  3)
//  DP , with recursion

public class Solution {
   public static int minCount(int n,int[] storage) {
       if(n==0){
          return 0;
       }
       int minStep=Integer.MAX_VALUE;
       for(int i=1; i*i<=n ; i++){
	    int currentAns;
            if(storage[n-(i*i)]==-1){
		    currentAns=minCount(n-(i*i),storage);
		    storage[n-(i*i)]=currentAns;
		}else{
		    currentAns=storage[n-(i*i)];
		}

		if(currentAns<minStep){
                   minStep=currentAns;
		}
	   }
	   int myAns=1+minStep;
	   return myAns;

   }
   public static int minCount(int n) {
     int[] storage=new int[n+1];
     for(int i=0; i<storage.length ; i++){
	storage[i]=-1;
     }
     return minCount(n, storage);
  }
}






 //__________________________________________________

//  4)
//  DP , Without recursion

public class Solution {

	public static int minCount(int n) {
		//Your code goes here
        
        if (n < 0) {
          return -1;
        }
        if (n >= 0 && n <= 3) {
          return n;
        }
        
        int minSquaresRequired[] = new int[n + 1];
        minSquaresRequired[1] = 1;
        minSquaresRequired[2] = 2;
        minSquaresRequired[3] = 3;
        for (int eachNum = 4; eachNum <= n; eachNum++) {
          int myAns = Integer.MAX_VALUE;
          int eachPossibility = 1;
            
          int sqr = (eachPossibility * eachPossibility);
            
          while (sqr <= eachNum) {
            int smallAns = minSquaresRequired[(n - sqr)];
              
            myAns = 1 + Math.min(myAns, smallAns);
              
              
            eachPossibility += 1;
            sqr = (eachPossibility * eachPossibility);
          }
            
          minSquaresRequired[eachNum] = myAns;
        }
        
        return minSquaresRequired[n];
	}

}



 5) //simpler then 4
 DP , Without recursion

public class Solution {

	public static int minCount(int n) {

		int[] storage=new int[n+1];
		storage[0]=0;
		storage[1]=1;

		for(int i=2; i<=n ; i++){
			storage[i]=Integer.MAX_VALUE;
			for(int j=1; j*j<=i ; j++){
				storage[i]=Math.min(storage[i],storage[i-(j*j)]);
			}
			storage[i]+=1;
		}
		return storage[n];

	}

}










