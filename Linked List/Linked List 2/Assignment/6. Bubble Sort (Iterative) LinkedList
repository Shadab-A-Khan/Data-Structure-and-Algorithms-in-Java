Bubble Sort (Iterative) LinkedList
Send Feedback
Given a singly linked list of integers, sort it using 'Bubble Sort.'
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the sorted singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
0 <= M <= 10^3
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Output 2 :
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90





// /*

// 	Following is the Node class already written for the Linked List

// 	class LinkedListNode<T> {
//     	T data;
//     	LinkedListNode<T> next;
    
//     	public LinkedListNode(T data) {
//         	this.data = data;
//     	}
// 	}

// */

// public class Solution {
    
//     public static LinkedListNode<Integer> swap(LinkedListNode<Integer> prev ,  LinkedListNode<Integer> curr , LinkedListNode<Integer> nex){
//         prev.next=curr.next;
//         nex.next=curr;
//         cur.next=nex.next;

// 	public static LinkedListNode<Integer> bubbleSort(LinkedListNode<Integer> head) {
        
//         LinkedListNode<Integer> prev=head;
//         LinkedListNode<Integer> curr=head;
//         LinkedListNode<Integer> nex=head;
        
        
// 		if(head==null || head.next==null){
//             return head;
//         }
        
//         LinkedListNode<Integer> temp = head;
//         while(temp.next!=null){
//             if(temp.next.data <= temp.next.next.data){
//                 temp=temp.next;
//             }
//           swap(prev ,curr ,nex);
//         }
//     return head;
// 	}
// }

/*

	Following is the Node class already written for the Linked List

	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;
    
    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*/

public class Solution {

	public static LinkedListNode<Integer> bubbleSort(LinkedListNode<Integer> head) {
		//Your code goes here
        LinkedListNode<Integer> temp=head;
        int len=0;
        while(temp!=null)
        {
            len++;
            temp=temp.next;
        }
        temp=head;
        LinkedListNode<Integer> prev=null;
        LinkedListNode<Integer> temp2=null;
        for(int i=0;i<len-1;i++)
        {
            for(int j=0;j<len-i-1;j++)
            {
                if(temp.data>temp.next.data)
                {
                    if(j==0)
                    {
                        temp2=head.next;
                        head.next=temp2.next;
                        temp2.next=head;
                        head=temp2;
                        prev=temp2;
                    }
                    else
                    {
                        temp2=temp.next;
                        prev.next=temp2;
                        temp.next=temp2.next;
                        temp2.next=temp;
                        prev=temp2;
                    }
                }
                else
                {
                    prev=temp;
                    temp=temp.next;
                }
            }
            prev=null;
            temp=head;
        }
        return head;
	}
}
