Check cousins
Send Feedback
Given the binary Tree and two nodes say ‘p’ and ‘q’. Determine whether the two nodes are cousins of each other or not. Two nodes are said to be cousins of each other if they are at same level of the Binary Tree and have different parents.
Do it in O(n).
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Line 2 : integer value of p 
Line 3 : Integer value of q
Output format :
true or false
Constraints :
1 <= N <= 10^5
Sample Input :
5 6 10 2 3 4 -1 -1 -1 -1 9 -1 -1 -1 -1
2
4
Sample Output :
true



import java.util.ArrayList;


public class solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */
    
    public static int depth(BinaryTreeNode<Integer> root , int node){
        if(root==null){
            return -1;
        }
        if(root.data==node){
            return 0;
        }
        
        int left=depth(root.left,node);
        if(left!=-1){
            return left+1;
        }
        int right=depth(root.right,node);
        if(right!=-1){
            return right+1;
        }
        return -1;
    }
    
    public static boolean isSiblings(BinaryTreeNode<Integer> root ,int p , int q){
        if(root==null){
            return false;
        }
        
        if(root.left!=null && root.right!=null){
            if(root.left.data==p && root.right.data==q){
                return true;
            }
            
            if(root.left.data==q && root.right.data==p){
                return true;
            }
             return isSiblings(root.left,p,q)  || isSiblings(root.right,p,q);
        }
        else if(root.left!=null){
           return isSiblings(root.left,p,q); 
        }
        else if(root.right!=null){
            return isSiblings(root.right,p,q);
        }
       return false;
    }
    
    

	public static boolean isCousin(BinaryTreeNode<Integer> root, int p, int q) {
		// Write your code here
       if(root==null){
           return false;
       }
        return ((depth(root,p) == depth(root,q)) && (!isSiblings(root,p,q)));

	}
}
