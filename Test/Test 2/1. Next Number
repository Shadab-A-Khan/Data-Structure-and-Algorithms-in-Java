Next Number
Send Feedback
Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 







/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/
 
 
 

public class Solution {

public static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head){
        if(head.next==null){
            return head;
        }
        LinkedListNode<Integer> prev=null,curr=head;
        while(curr!=null){
            LinkedListNode<Integer> temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }


	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
		if(head==null){
			return null;
		}

		head=reverse(head);  // 5 2 9 3
		int carry=1;
		int num;
        LinkedListNode<Integer> temp=head;
		 LinkedListNode<Integer> tail=null;
		while(temp!=null){
		    num=((temp.data)+carry)%10;
			carry=((temp.data)+carry)/10;
			temp.data=num;
			tail=temp;
			temp=temp.next;
		
		}

		if(carry==1){
			LinkedListNode<Integer> carryNode=new LinkedListNode<Integer>(carry);
            tail.next=carryNode;
		}
        
		return reverse(head);

   
	}


}






//OR




















public class Solution {
  

	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> n)
    {
       
   if(n== null)
            return n;
        
       LinkedListNode<Integer> current=n;
		LinkedListNode<Integer> prev=null;
		int length=0;
		LinkedListNode<Integer> last=current;
		while(current!=null)
        {
			length++;
			if(current.data!=9)
                prev=current;
            
			last=current;
			current=current.next;
		}// Now last is pointing to last digit. 
		//  Prev is pointing to last non 9.
		if(prev==null)
        {
			//case when number is all 9
			LinkedListNode<Integer> head=new LinkedListNode<Integer>(1);
			head.next=n;

            while(n!=null)
            {
				n.data=0;
				n=n.next;
			}
			return head;
		}else
        {
			prev.data=prev.data+1;
			prev=prev.next;
			while(prev!=null)
            {
				prev.data=0;
				prev=prev.next;
			}
			return n;
  
	}
    }

}
