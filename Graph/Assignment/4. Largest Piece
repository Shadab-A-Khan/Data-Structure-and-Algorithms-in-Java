Largest Piece
Send Feedback
It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3




public class Solution{
	public static int dfs(String cake[], int n) {
		boolean[][] visited = new boolean[n][n];
		int max = 0;
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(!visited[i][j] && cake[i].charAt(j)=='1' ){
					int ans = max1s( cake,visited,i,j,n);
					if(max <ans){
						max = ans;
					}
				}
			}
		}
		return max;
	}

	public static int max1s(String[] cake,boolean[][] visited,int x,int y,int n){
		int[] X_dir = {0,1,-1,0};
		int[] Y_dir = {1,0,0,-1};
		int max = 0;
		visited[x][y] = true;
		for(int i=0;i<X_dir.length;i++){

			int a = X_dir[i] +x;
			int b = Y_dir[i] + y;

			if(a>=0 && b>=0 && a<n &&
					b<n && cake[a].charAt(b) =='1' 
					&& !visited[a][b] ){

				int ans = max1s(cake,visited, a,b,n);
				max = max + ans;

			}


		}
		return max + 1;
	}


}



_________________________OR_______________________________






public class Solution {

    static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
    public static int dfs(String[] edge,boolean[][] visited,int x, int y, int n) {
		int count=1;
		visited[x][y]=true;
		for(int i=0; i<4 ; i++){
			int x_dir=x+dir[i][0];
			int y_dir=y+dir[i][1];
			if(x_dir>=0 && x_dir<n && y_dir>=0 && y_dir<n && !visited[x_dir][y_dir] && edge[x_dir].charAt(y_dir)=='1'){
				count+=  dfs(edge, visited, x_dir, y_dir, n);
			}
		}
		return count;
	}
	public static int dfs(String[] edge, int n) {
		int count=0;
		boolean[][] visited=new boolean[n][n];
		for(int i=0; i<n ; i++){
			for(int j=0; j<n; j++){
				if(edge[i].charAt(j)=='1' && !visited[i][j]){
                     int ans=dfs(edge,visited,i,j ,n);
					 count=Math.max(ans,count);
				}
			}
		}
		return count;
	}
}












