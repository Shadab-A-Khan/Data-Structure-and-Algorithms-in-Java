Coding Ninjas
Send Feedback
Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .
There is a path from any cell to all its neighbouring cells. For a particular cell, neighbouring cells are those cells that share an edge or a corner with the cell.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns in the matrix. 
Each of the following N lines contain M characters. Please note that characters are not space separated.
Output Format :
Print 1 if there is a path which makes the sentence “CODINGNINJA” else print 0.
Constraints :
1 <= N <= 1000
1 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
2 11
CXDXNXNXNXA
XOXIXGXIXJX
Sample Output 1:
1




// public class Solution {
	
// // package Graphs;

//     boolean findString(char[][] graph, int i, int j, boolean[][] visited, int index,int N,int M){
//         String str = "CODINGNINJA";
//         if(index == str.length()){
//             return true;
//         }
        
//         if(i < 0 || i >= N || j < 0 || j >= M || visited[i][j]){
//             return false;
//         }
        
//         char current = str.charAt(index);
//         boolean result = false;
//         if(graph[i][j] == current){
//             visited[i][j] = true;
//             result = result || findString(graph,i-1, j-1, visited, index+1,N,M);
//             result = result || findString(graph,i-1,j,visited, index+1,N,M);
//             result = result || findString(graph,i-1,j+1,visited,index+1,N,M);
//             result = result || findString(graph,i,j+1,visited,index+1,N,M);
//             result = result || findString(graph, i+1,j+1,visited,index+1,N,M);
//             result = result || findString(graph,i+1,j,visited,index+1,N,M);
//             result = result || findString(graph,i+1,j-1,visited,index+1,N,M);
//             result = result || findString(graph, i, j-1, visited, index+1,N,M);
//         }else{
//             return false;
//         }
//         visited[i][j] = false;
//         return result;
//     }
    
// 	int solve(String[] Graph , int N, int M) {
//         boolean[][] visited = new boolean[N][M];
//         char[][] g = new char[N][M];
//         for(int i = 0;i < N;i++){
//         	String str = Graph[i];
//             for(int j = 0;j < M;j++){
//                 g[i][j] = str.charAt(j);
//             }
//         }
        
//         for(int i = 0;i < N;i++){
//             for(int j = 0;j < M;j++){
//                     boolean check = findString(g, i,j, visited,0,N,M);
//                     if(check){
//                         return 1;
//                     }
//             }
//         }
// 		return 0;
// 	}
	
	
// }

import java.util.*;

public class Solution {

    public static int solve(String[] Graph, int N, int M) {
        String searchingString = "CODINGNINJA";
        boolean[][] visited = new boolean[Graph.length][];
        for (int i = 0; i < Graph.length; i++) {
            visited[i] = new boolean[Graph[i].length()];
        }
        for (int i = 0; i < Graph.length; i++) {
            for (int j = 0; j < Graph[i].length(); j++) {
                if (Graph[i].charAt(j) == 'C') {
                    boolean ans = dfs(Graph, visited, searchingString.substring(1), i, j);
                    if (ans) {
                        return 1;
                    }
                }
            }

        }
        return 0;

    }

    public static boolean dfs(String[] graph, boolean[][] visited, String searchString, int i, int j) {
        if (searchString.length() == 0) {
            visited[i][j] = true;
            return true;
        }
        visited[i][j] = true;
        // To traverse in 8 different directions
        int[] X_Dir = {-1, 1, 0, 0, 1, -1, 1, -1};
        int[] Y_Dir = {0, 0, -1, 1, 1, -1, -1, 1};
        for (int k = 0; k < X_Dir.length; k++) {
            int x = i + X_Dir[k];
            int y = j + Y_Dir[k];
            if (x >= 0 && y >= 0 && x < graph.length &&
                    y < graph[x].length() &&
                    graph[x].charAt(y) == searchString.charAt(0) && !visited[x][y]) {
                boolean smallAns = dfs(graph, visited, searchString.substring(1), x, y);
                if (smallAns) {
                    return smallAns;
                }

            }

        }
        visited[i][j] = false;
        return false;

    }

}
