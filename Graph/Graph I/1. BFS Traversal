Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2








import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;
public class Solution {
	
    static Queue<Integer> q = new LinkedList<Integer>();
	public static void printBFS(int[][] edges, int sv, boolean[] visited){
         System.out.print(sv+" ");
		 visited[sv]=true;		 
		
		
		for(int i = 0; i<edges.length ; i++){
			if(edges[sv][i]==1 && !visited[i]){
				q.add(i);
				visited[i]=true;
			}
		}
		while(!q.isEmpty()){
            printBFS(edges, q.remove(), visited);
		}
         
	}

	public static void print(int[][] edges){
		boolean[] visited = new boolean[edges.length];
        
		for (int i = 0; i < edges.length; i++) {
			if (!visited[i]) {
				printBFS(edges, i, visited);
			}
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
        
		 Scanner sc= new Scanner(System.in);
		 int n=sc.nextInt();
		 int e=sc.nextInt();
		 int[][] edges=new int[n][n];
		 for(int i=0; i<e; i++){
              int fv=sc.nextInt();
			  int sv=sc.nextInt();
			  edges[fv][sv]=1;
			  edges[sv][fv]=1;
		 }
         print(edges);
	}

}






//OR____________________________________








import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;
public class Solution {

    public static void printBFShelper(int[][] edges , int sv , boolean[] visited) {
        //  Queue<Integer> q= new Queue<>();
        Queue<Integer> q = new LinkedList<>();
        // int n= edges.length;
        q.add(sv);
        visited[sv]=true;
        while(!q.isEmpty()){
            int front = q.remove();
            System.out.print(front + " ");
            for(int i=0 ; i<edges.length ; i++){
                if(edges[front][i]==1 && !visited[i]){
                    q.add(i);
                    visited[i]=true;
                }
            }
        }
    }


    public static void printBFS(int[][] edges){
        boolean[] visited = new boolean[edges.length];
        //made changes
        for(int i=0; i< edges.length; i++){
            if(!visited[i]){
                printBFShelper(edges, i, visited);   
            }
            // printBFShelper(edges , 0  , visited);

        }
    }

    public static void main(String[] args) throws NumberFormatException, IOException {

        /* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */

        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();

        int v=sc.nextInt();

        int edges[][] = new int[n][n];
        // int n =edges.length;                
        for(int i=0 ; i<v ; i++){
            int fv=sc.nextInt();
            int sv=sc.nextInt();

            edges[fv][sv]=1;

            edges[sv][fv]=1;          
        }

        printBFS(edges);
    }
}


