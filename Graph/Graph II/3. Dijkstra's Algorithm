Code : Dijkstra's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
For each vertex, print its vertex number and its distance from source, in a separate line. The vertex number and its distance needs to be separated by a single space.
Note : Order of vertices in output doesn't matter.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5







import java.util.Scanner;
public class Solution {

	public static void Dijkstra(int[][] storage){
		int v=storage.length;
		int[] weigth=new int[v];
		weigth[0]=0;
		boolean []visited=new boolean[v];
		for(int i=1; i<weigth.length; i++){
             weigth[i]=Integer.MAX_VALUE;
		}

		for(int i=0; i<v-1 ; i++){
			int minVertex=-1;
			for(int j=0; j<weigth.length ; j++){
				if((minVertex==-1 || weigth[j]<weigth[minVertex]) && !visited[j]){
					minVertex=j;
				}
			}
			visited[minVertex]=true;
			for(int j=0; j<v; j++){
				if(storage[minVertex][j] != 0 && !visited[j]){
					if(weigth[j]>(storage[minVertex][j]+weigth[minVertex])){
						weigth[j]=storage[minVertex][j]+weigth[minVertex];
					}
				}
			}           
		}
		for(int i = 0; i < v; i++){
			System.out.println(i + " "+ weigth[i]);
		}
	}

	public static void main(String[] args) {
         Scanner sc=new Scanner(System.in);
		 int v=sc.nextInt();
		 int e=sc.nextInt();
		 int[][] storage=new int[v][v];
		 for(int i=0 ;i<e; i++){
			 int fv=sc.nextInt();
			 int sv=sc.nextInt();
			 int weigth=sc.nextInt();
			 storage[fv][sv]=weigth;
			 storage[sv][fv]=weigth;
		 }

		 Dijkstra(storage);
	}
}
