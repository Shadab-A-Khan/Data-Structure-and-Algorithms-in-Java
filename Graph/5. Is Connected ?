Code : Is Connected ?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2






import java.util.Scanner;

public class Solution {
    public static void DFS(int [][]edges, int sv, boolean[] visited){
        visited[sv]=true;
        for(int i=0;i<edges.length;i++)
        {
            if(edges[sv][i]==1 && !visited[i])
            {
                DFS(edges,i,visited);
                visited[i]=true;
                
            }
        }
    }
public static boolean isConnected(int[][] edges)
{
    boolean[] visited=new boolean[edges.length];
    DFS(edges, 0, visited);
    for(int i=0;i<visited.length;i++)
    {
        if(!visited[i])
        {
            return false;
        }
    }
    return true;
}
	public static void main(String[] args) {
         int n; 
        int e;
		Scanner s = new Scanner(System.in);
	    n= s.nextInt();
		e = s.nextInt();
        if(n==0){
            System.out.println("true");
            return;
        }
		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
         int edges[][]=new int[n][n];
        for(int i=0; i<e;i++)
        {
            int fv=s.nextInt();
            int sv=s.nextInt();
            edges[fv][sv]=1;
            edges[sv][fv]=1;
            
        }
        System.out.println(isConnected(edges));
	}
}




                      //OR



// import java.util.*;

// public class Solution {

	
// 	public static void help(int edges[][],boolean visited[],int fv){  
//         visited[fv]=true;
//         int n=edges.length;   
//           for(int j=0;j<n;j++){
//               if(edges[fv][j]==1&&!visited[j]){
//                  help(edges,visited,j); 
//               }
//           }
//     }
//     public static void main(String[] args){
// 		Scanner s = new Scanner(System.in);
// 		int n = s.nextInt();
//         // total number of edges e
// 		int e = s.nextInt();
//         int edges[][]=new int[n][n];
//         for(int i=0;i<e;i++){
//             int fv=s.nextInt();
//             int sv=s.nextInt();
//             edges[fv][sv]=1;
//             edges[sv][fv]=1;
//         }    
//         boolean visited[]=new boolean[edges.length];
//         help(edges,visited,0);
//        //now check if all elements is visited or not
//         int length=visited.length;
//         int i=0;
//         while(i<visited.length){
//             if(visited[i]!=true){
//                 System.out.print("false");
//                 System.exit(0);
//             }
//             i++;
//         }
//           System.out.print("true");
//           System.exit(0);
//     }
// }
