Longest Consecutive Sequence
Send Feedback
You are given an array of unique integers that contain numbers in random order. You have to find the longest possible sequence of consecutive numbers using the numbers from given array.
You need to return the output array which contains starting and ending element. If the length of the longest possible sequence is one, then the output array must contain only single element.
Note:
1. Best solution takes O(n) time.
2. If two sequences are of equal length, then return the sequence starting with the number whose occurrence is earlier in the array.
Input format:
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol n.
The following line contains n space separated integers, that denote the value of the elements of the array.
Output format:
The first and only line of output contains starting and ending element of the longest consecutive sequence. If the length of longest consecutive sequence, then just print the starting element.
Constraints :
0 <= n <= 10^6
Time Limit: 1 sec
Sample Input 1 :
13
2 12 9 16 10 5 3 20 25 11 1 8 6 
Sample Output 1 :
8 12 
Sample Input 2 :
7
3 7 2 1 9 8 41
Sample Output 2 :
7 9
Explanation: Sequence should be of consecutive numbers. Here we have 2 sequences with same length i.e. [1, 2, 3] and [7, 8, 9], but we should select [7, 8, 9] because the starting point of [7, 8, 9] comes first in input array and therefore, the output will be 7 9, as we have to print starting and ending element of the longest consecutive sequence.
Sample Input 3 :
7
15 24 23 12 19 11 16
Sample Output 3 :
15 16







import java.util.HashMap;
import java.util.ArrayList;

public class Solution {

    public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {

        HashMap<Integer, Boolean> map = new HashMap<>();
        for(int i=0 ; i<arr.length ; i++){
            map.put(arr[i],true);
        }

        for(int i=0; i<arr.length ; i++){
            if(map.containsKey(arr[i]-1)){
                map.put(arr[i],false);
            }
        }
        int start=0;
        int count=0;

        for(int i=0; i<arr.length ; i++){
            
            if(map.get(arr[i])==true){

                 int localCount=1;
                 int localStart=arr[i];

                 while(map.containsKey(localStart+localCount)){
                     localCount++;
                 }
                 
                if (localCount > count) {
                     count = localCount;
                     start = localStart;
                }            
            }

        }

        ArrayList<Integer> res = new ArrayList<>();
        res.add(start);
        if(count>1){
        	res.add(start+count-1);
		}
        return res;
    }

}













//OR













 // import java.util.Map;
// import java.util.HashMap;
// import java.util.ArrayList;

// public class Solution {
    
//     public static ArrayList<Integer> helper(int[] arr){
//         int n = arr.length;
//         HashMap<Integer, Boolean> map = new HashMap<>();
//         // assuming all elements are the start of their respective consecutive sequence
//         for(int i=0; i<n; i++){
//             map.put(arr[i], true);
//         }
        
//         // making sure, elements who are actually start of their sequnce, are the ones only true in map
//         for(int i=0; i<n; i++){
//             if(map.containsKey(arr[i]-1)){
//                 map.put(arr[i], false);
//             }
//         }
        
//         // now only those elements are true in map, who are actually start of their sequence
//         int globalLen = 0;
//         int globalStart = 0;
//         for(int i=0; i<n; i++){
//             if(map.get(arr[i])==true){
//                 // arr[i] is start of a consecutive sequence
//                 int localStart = arr[i];
//                 int localLen = 1;
//                 while(map.containsKey(localStart+localLen)){
//                     localLen++;
//                 }

//                 // 2 3 -> gl=2; gs=2
//                 // 5 6 7 -> ll=3; ls=5


//                 // s=5
//                 // e=5 + (6-1)

//                 if(localLen>globalLen){
//                     globalStart = localStart;
//                     globalLen = localLen;
//                 }
//             }
//         }


//         ArrayList<Integer> res = new ArrayList<>();
//         res.add(globalStart);
//         if(globalLen>1){
//         	res.add(globalStart+globalLen-1);
// 		}
//         return res;
//     }
    
// 	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {
// 		return helper(arr);
//     }
// }

























// import java.util.HashMap;
// import java.util.ArrayList;

// public class Solution {
// 	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {

// 		ArrayList<Integer> output = new ArrayList<>();
// 		HashMap<Integer, Boolean> map = new HashMap<>();
// 		HashMap<Integer, Integer> lenMap = new HashMap<>();
// 		for (int i = 0; i < arr.length; i++) {
// 			map.put(arr[i], true);
// 		}
// 		int maxStart = -1, maxLen = 0;
// 		boolean startCheck = true;

// 		for (int i : arr) {
// 			if (map.get(i)) {
// 				int currStart = i, currLen = 1;
// 				boolean flag = true;
// 				map.put(i, false);

// 				int ahead = i + 1;
// 				while (flag) {
// 					if (map.containsKey(ahead)) {

// 						currLen = currLen + 1;
// 						map.put(ahead, false);
// 						ahead = ahead + 1;
				
// 					} else {
// 						flag = false;
// 					}
// 				}
// 				flag = true;
// 				int before = i - 1;
				
// 				while (flag) {
// 					if (map.containsKey(before)) {
						
// 						currLen = currLen + 1;
// 						currStart = before;
// 						map.put(before, false);
// 						before = before - 1;
					
// 					} else {
// 						flag = false;
// 					}
// 				}

// 				System.out.println();
// 				if (currLen >= maxLen) {
// 					maxLen = currLen;
// 					maxStart = currStart;
// 					lenMap.put(maxStart, maxLen);
// 				}
// 			}
		
// 		}

// 		for (int i = 0; i < arr.length; i++) {
// 			if (lenMap.containsKey(arr[i]) && lenMap.get(arr[i]) >= maxLen) {
// 				maxStart = arr[i];
// 				maxLen = lenMap.get(arr[i]);
// 				break;
// 			}
// 		}
// 		output.add(maxStart);
// 		output.add(maxStart + maxLen - 1);
// 		return output;
// 	}
// }










import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        ArrayList<Integer> output = new ArrayList<>();
        HashMap<Integer, Boolean> map = new HashMap<>();
        HashMap<Integer, Integer> lenMap = new HashMap<>();
        for (int i=0;i<arr.length;i++)
        {
            map.put(arr[i],true);
        }
        int maxStart=-1,maxLen=0;
        boolean startCheck=true;
        
        for (int i: arr)
        {
            if (map.get(i))
            {
                int currStart=i,currLen=1;
                //System.out.println("Current start of sequence: "+currStart);
                //System.out.println("Current length of sequence: "+currLen);
                boolean flag=true;
                map.put(i,false);
                
                int ahead=i+1;
                //System.out.println("Checking for values ahead");
                //System.out.println();
                while(flag)
                {
                    if(map.containsKey(ahead))
                    {
                        //System.out.println(ahead+" is included in sequence and status updates to false");
                        currLen=currLen+1;
                        map.put(ahead,false);
                        ahead=ahead+1;
                        //System.out.println("Current length of sequence: "+currLen);
                    }
                    else
                    {
                     	flag=false;   
                    }
                }
               flag=true; 
               int before=i-1;
               //System.out.println();
               //System.out.println("Checking for values before");
                while(flag)
                {
                    if(map.containsKey(before))
                    {
                        //System.out.println(before+" is included in sequence and status updates to false");
                        currLen=currLen+1;
                        currStart=before;
                        map.put(before,false);
                        before=before-1;
                        //System.out.println("Current length of sequence: "+currLen);
                    }
                    else
                    {
                     	flag=false;   
                    }
                }
               
               System.out.println();
               if (currLen>=maxLen)
               {
                   maxLen=currLen;
                   maxStart=currStart;   
                   lenMap.put(maxStart,maxLen); 
               }
            }
            /*
            else
            {
                System.out.println("Element already considered in previous sequence");
            }
            System.out.println();
            */
        }
        
        //System.out.println("Current start point and length: "+ maxStart+", "+maxLen);
        /*
        for (Integer i: lenMap.keySet())
        {
            System.out.println(i+": "+lenMap.get(i));
        }
        System.out.println();
        */
        
        
        for (int i=0;i<arr.length;i++)
        {
            if (lenMap.containsKey(arr[i]) && lenMap.get(arr[i])>=maxLen)
            {
                maxStart=arr[i];
                maxLen=lenMap.get(arr[i]);
                break;
            }
        }
        output.add(maxStart);
        output.add(maxStart+maxLen-1);
        return output;
    }
}
