Check redundant brackets
Send Feedback
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.
Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Input Format :
The first and the only line of input contains a string expression, without any spaces in between.
Output Format :
The first and the only line of output will print either 'true' or 'false'(without the quotes) denoting whether the input expression contains redundant brackets or not.
Note:
You are not required to print the expected result. It has already been taken care of.
Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false









import java.util.Stack;
public class Solution {

	public static boolean checkRedundantBrackets(String expression) {
		Stack<Character> stack = new Stack<>();
        for(int i=0 ; i<expression.length() ; i++){
            if(expression.charAt(i)=='+' || expression.charAt(i)=='-' || expression.charAt(i)=='%' ||
              expression.charAt(i)=='*' ){
                stack.push(expression.charAt(i));
            }
            else if(expression.charAt(i)=='('){
                stack.push(expression.charAt(i));
            }
            else if(expression.charAt(i)==')'){
                if(stack.peek()=='('){
                    return true;
                }
               while(stack.peek()=='*' || stack.peek()=='-' || stack.peek()=='%' || stack.peek()=='+' ){
                   stack.pop();
               }
                stack.pop();
            }
            
        }
        return false;
	}
}










see check the redundcy ,
we need to check for parenthesis that 
has of no use
like

()

or

((a+b))-> in this expample the outer 
bracket that is unecessary we are 
not doing anything there

so if the bracket is reduntent
in this case and we will return true 
for in


so how to approach the problme


now, first i will suggest you to watch the 
hint video

now , we need four of the checks 
but before that we will create a stack

see if there is any operation perfroming
in between the bracket it means it is
not reduntent right


so , now the expression String
should be somthing like 


a+(b)+c  this right



now will use a loop that will help us to 
itterate over the whole expression

now comes the four checks

1)
we will check if the char at 
some index is +, -, / or *
we will simply push it into the stack

2) if there is some opening braket 
we will push it into the stack as 
well

now comes the clolign bracket
3) see if there is any closing bracket
    we will check the peek of the stack 
	if there is ) opening braket there 

	means there is nothing in between
	closing ) and opening (
		hence true its reduntent

4) else we will pop all and continue movieing 
forward in theexpression










